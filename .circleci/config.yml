
# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  heroku: circleci/heroku@1.2.6
  node: circleci/node@4.7
jobs:
  build-and-test-angular-main:
        machine: true
        steps:
            - checkout
            - node/install:
                install-yarn: true
                install-npm: true
            - run: node --version
            - run: 
                name: install angular
                command: cd frontend/angularMain && npm install @angular/cli
            - run:
                name: install frontend dependencies
                command: cd frontend/angularMain && npm install
            - run:
                name: compile angular project
                command: cd frontend/angularMain && npm run build
            - run:
                name: install heroku
                command: sudo curl https://cli-assets.heroku.com/install.sh | sh
            - run:
                name: login to heroku
                command: HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
            - run:
                name: Build and push webserver container
                command: cd webservers/mainserver && HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push -a main-web-server web
            - run:
                name: Release container on heroku
                command: HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release -a main-web-server web


  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0-focal 
        auth:
          username: sjo0911  # can specify string literal values
          password: $DOCKERHUB_PASSWORD  # or project environment variable reference
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/Tutorial.UnitTests
          name: Run tests
          command: |
            dotnet test
            

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - build-and-test-angular-main


# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  deploy-webserver:
        docker:
          - image: circleci/node:16.8.0
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: install angular
                command: cd frontend/angularMain && npm install @angular/cli
            - run:
                name: install webserver dependencies
                command: cd frontend/angularMain && npm install
            - run:
                name: compile angular project
                command: cd frontend/angularMain && npm run build && cd .. && cd ..
            - run:
                name: copy javagames to webserver
                command: cp -avr frontend/javagames/ webservers/mainserver/dist/
            - run:
                name: deploy webserver
                command: | 
                  cd webservers
                  cd mainserver
                  sudo curl https://cli-assets.heroku.com/install.sh | sh
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push -a sjo0911 --recursive
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release -a sjo0911 web
  deploy-Apis:
        docker:
          - image: circleci/node:16.8.0
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: deploy
                command: | 
                  cd api/LoginApi
                  sudo curl https://cli-assets.heroku.com/install.sh | sh
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push -a sjo0911api --recursive
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release -a sjo0911api web
            - run:
                name: deploy gateway
                command: | 
                  cd api/Gateway
                  sudo curl https://cli-assets.heroku.com/install.sh | sh
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push -a sjo0911gateway --recursive
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release -a sjo0911gateway web
            - run:
                name: deploy guestbookApi
                command: | 
                  cd api/GuestbookApi
                  sudo curl https://cli-assets.heroku.com/install.sh | sh
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push -a sjo0911guestbookapi --recursive
                  HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release -a sjo0911guestbookapi web
  deploy-wildfire:
        docker:
          - image: cimg/openjdk:8.0.302
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: maven package EShop
                command: cd skolarbete/EShop && mvn package
            - run:
                name: maven package EShopJsf
                command: cd skolarbete/EShopJsf && mvn package
            - run:
                name: deploy wildfly server with war files
                command: | 
                  cd skolarbete
                  sudo curl https://cli-assets.heroku.com/install.sh | sh
                  HEROKU_API_KEY=${HEROKU_TOKEN2} heroku container:login
                  HEROKU_API_KEY=${HEROKU_TOKEN2} heroku container:push -a sjo0911wildfly --recursive
                  HEROKU_API_KEY=${HEROKU_TOKEN2} heroku container:release -a sjo0911wildfly web



  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0-focal 
        auth:
          username: sjo0911  # can specify string literal values
          password: $DOCKERHUB_PASSWORD  # or project environment variable reference
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/Tutorial.UnitTests
          name: Run tests
          command: |
            dotnet test
            

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - deploy-webserver
      - deploy-Apis
      - deploy-wildfire
